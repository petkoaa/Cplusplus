WENN DAS NICH DIE AUFGABE WAR KANN DIESES FILE IGNPRIERT WERDEN. IST AUCH SEHR PEINLICH ZU LESEN UND VERSTEHEN 
ICH HABE ES AUCH AUF PAPIER GRAFISCHERWEISE GESCHRIEBEN 

///(modifiziert) Heapsort
unsigned parent(unsigned i) {return (i - 1) / 2;} // Elternknoten
unsigned lchild(unsigned i) {return 2 * i + 1;} // Linkes Kind
unsigned rchild(unsigned i) {return 2 * i + 2;} // Rechtes Kind
void hochblubbern(vector<string> & heap, unsigned i) {
	if (i > 0 && calc_n(heap[i]) > calc_n(heap[parent(i)]) ){					//modifiziert
		tausche(heap, i, parent(i));
		hochblubbern(heap, parent(i));
	}
}
void versickern(vector<string> & heap, unsigned i, unsigned size) {
	if ((lchild(i) >= size || calc_n(heap[lchild(i)]) <=  calc_n(heap[i])) &&
	    (rchild(i) >= size || calc(heap[rchild(i)]) <= calc_n(heap[i]))) return;  // modifiziert
	unsigned next_i = lchild(i);
	if (rchild(i) < size && calc_n(heap[rchild(i)]) > calc_n(heap[lchild(i)]))   //modifiziert 
		next_i = rchild(i);
	tausche(heap, i, next_i);
	versickern(heap, next_i, size);
}
void heap_sort(vector<string> & array) {
	unsigned n = array.size();
	for (unsigned i = 0; i < n; i++)
		hochblubbern(array, i);
	for (int i = n - 1; i >= 0; i--) {
		tausche(array, 0, i);
		versickern(array, 0, i);
	}
}


//////////////////////////////////////////////////////////////////////////////////////////////


Erstens implementieren wir eine funktion "calculate_n" mit folgendem deffinition 

		unsigned calc_n (string);

die unsere Laufzeit formel (string) mit n=10^googol ausfuert und die ergenbis als unsigned int liefert. 
Jetzt koennen wir unsere modifizierte heapsort auf die Liste von Lauzeitformeln anwenden:

Zeile	|Effekt 
20		heap_sort (42·n4; 4n2logn+2n; 242; 2log4n; 3(n+83)+100 logn; 4n2+√7n; 2n+5;n2+102n;n−1∑i=0i3)
21		unsigned n = 9
22		for schleife wendet hochblunern n-mal auf array mit i++
5		hochblubern ( (42·n4; 4n2logn+2n; 242; 2log4n; 3(n+83)+100 logn; 4n2+√7n; 2n+5;n2+102n;n−1∑i=0i3), 0)
6		i!>0 also nix passiert
23		hochblubern (array, 1)
6 		i>0 aber 4n^2logn+2n !> 42n^4 also nix passiert 
23 		hochblubern (array, 2) 
6		i>0 aber 2^42 !> 42n^4 also nix passiert 
23		hochblubbern (array, 3)
6		i>0 aber 2^log(4)n !>4n^2logn+2n also nix passiert
23		hochblubern (aaray, 4)
6		i>0 aber 3(n+83)+100 logn !> 4n2logn+2n also nix passiert 
23		hochblubern (array, 5) 
6		i>0  && 4n2+√7n > 2^42
7 		tausche (array, 5, 2) // also unsere liste sieht jetzt so aus (42·n4; 4n2logn+2n; 4n2+√7n;  2log4n; 3(n+83)+100 logn; 4n2+√7n; 2^n+5; n^2+10^2n; n−1∑i=0i3)
8		hochblubern (array(neu), 2)
6		i>0 aber n^2 !> 42n^4 also nix passiert
23		hochblubbern (array, 6)
6		i>0 && 2^n+5 > 4n^2+sqrt7 
7		tausche (array, 6, 2)		// (42·n4; 4n2logn+2n; 2^n+5; 2log4n; 3(n+83)+100 logn; 4n2+√7n; 4n2+√7n;  n^2+10^2n; n−1∑i=0i3)
8		hochblubbern (array, 2) 
6 		i>0 && 2^n+5 > 42·n4 
7		tausche (array, 2, 0)		//(2^n+5;  4n2logn+2n; 42·n4; 2log4n; 3(n+83)+100 logn; 4n2+√7n; 4n2+√7n;  n^2+10^2n; n−1∑i=0i3)
8		hochblubern (array, 0)
6 		i!>0 also nix passiert 
23		hochblubern (array, 7) 
6		i>0 && n^2+10^2n > 2log4n 
7 		tausche (array, 7, 3)		//(2^n+5;  4n2logn+2n; 42·n4; n^2+10^2n; 3(n+83)+100 logn; 4n2+√7n; 4n2+√7n; 2log4n;  n−1∑i=0i3)
8		hochblubern (array, 3) 
6		i>0 aber n^2+10^2n !> 4n2logn+2n also nix passiert
23 		hochblubern (array, 8)
6 		i>0 && n−1∑i=0i3 > n^2+10^2n
7		tausche (array, 7, 3)		//(2^n+5;  4n2logn+2n; 42·n4; n−1∑i=0i3; 3(n+83)+100 logn; 4n2+√7n; 4n2+√7n; 2log4n; n^2+10^2n;  )
8		hochblubern (array, 3)
6		i>0 && n−1∑i=0i3 > 4n2logn+2n
7		tausche (array, 3, 1)		//(2^n+5;  n−1∑i=0i3; 42·n4; 4n2logn+2n; 3(n+83)+100 logn; 4n2+√7n; 4n2+√7n; 2log4n; n^2+10^2n;  )
8		hochblubbern(array, 1)
6		i!>0 also nix passiert 

//------------Ende schleife an zeile 23 (gröste element ist auf position 0) ----------------// 

dass ist die Ausgabeheap ab jetzt vervende ich nur reffenzen zu die elementposition

(2^n+5;  n−1∑i=0i3; 42·n4; 4n2logn+2n; 3(n+83)+100 logn; 4n2+√7n; 4n2+√7n; 2log4n; n^2+10^2n; )
<	0		1		  2			3				4			5		6		  7			8 >


24		for (unsigned i=8, i>=0, i--)
25		tausche (array, 8, 0)				//<8,1,2,3,4,5,6,7,0>
26		verschickern (heap,	0, 8)
12/13	return; //lchild && rchild >size 






	